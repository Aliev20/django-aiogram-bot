
import logging
import datetime
from random import randint

from aiogram import Bot, Dispatcher, executor, types
from .config import API_TOKEN, admins
from .keyboard import *
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import Throttled

from loguru import logger as l
from geopy.geocoders import Nominatim
from fake_useragent import UserAgent

from aviato.models import *
from aviato.management.commands.db import *
from aviato.management.commands.keyboard import *

storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=storage)

class D(StatesGroup):
	user_id = State()
	code = State()
	name = State()
	note = State()
	address = State()
	prod = State()

	match = State()
	match2 = State()

	match3 = State()
	match4 = State()

	remake_request = State()
	edit_product = State()

async def get_menu(message):
	user = await get_user_or_create(user_id=str(message.from_user.id), username=message.from_user.username)

	if message.chat.id in admins:
		await message.answer(f'{message.from_user.first_name} üëã. \n\n(–£ –≤–∞—Å —Ä–æ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)', reply_markup=admin_menu())
	
	elif user.role == "–ê–¥–º–∏–Ω":
		await message.answer(f'{message.from_user.first_name} üëã. \n\n(–£ –≤–∞—Å —Ä–æ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)', reply_markup=admin_menu())

	elif user.role == "–ú–µ–Ω–µ–¥–∂–µ—Ä":
		await message.answer(f'{message.from_user.first_name} üëã. \n\n(–£ –≤–∞—Å —Ä–æ–ª—å –ú–µ–Ω–µ–¥–∂–µ—Ä–∞)', reply_markup=manager_menu())

	elif user.role == "–û–ø–µ—Ä–∞—Ç–æ—Ä":
		await message.answer(f'{message.from_user.first_name} üëã. \n\n(–£ –≤–∞—Å —Ä–æ–ª—å –û–ø–µ—Ä–∞—Ç–æ—Ä–∞)', reply_markup=operator_menu())

	elif user.role == "–õ–æ–≥–∏—Å—Ç":
		await message.answer(f'{message.from_user.first_name} üëã. \n\n(–£ –≤–∞—Å —Ä–æ–ª—å –õ–æ–≥–∏—Å—Ç–∞)', reply_markup=logist_menu())

	elif user.role == "–£–ø–∞–∫–æ–≤—â–∏–∫":
		await message.answer(f'{message.from_user.first_name} üëã. \n\n(–£ –≤–∞—Å —Ä–æ–ª—å –£–ø–∞–∫–æ–≤—â–∏–∫–∞)', reply_markup=packer_menu())

	elif user.role == "–í–æ–¥–∏—Ç–µ–ª—å":
		await message.answer(f'{message.from_user.first_name} üëã. \n\n(–£ –≤–∞—Å —Ä–æ–ª—å –í–æ–¥–∏—Ç–µ–ª—å)', reply_markup=driver_menu())

	else:
		await message.answer(f'{message.from_user.first_name} üëã, \n\n—É –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /code –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥')

async def get_menu_call(call):
	user = await get_user_or_create(user_id=str(call.message.chat.id), username=call.message.from_user.username)
	if call.message.chat.id in admins:
		await call.message.answer(f'üîô –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=admin_menu())

	elif user.role == "–ê–¥–º–∏–Ω":
		await call.message.answer(f'üîô –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=admin_menu())
	
	elif user.role == "–ú–µ–Ω–µ–¥–∂–µ—Ä":
		await call.message.answer(f'üîô –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=manager_menu())

	elif user.role == "–û–ø–µ—Ä–∞—Ç–æ—Ä":
		await call.message.answer(f'üîô –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=operator_menu())

	elif user.role == "–õ–æ–≥–∏—Å—Ç":
		await call.message.answer(f'üîô –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=logist_menu())

	elif user.role == "–£–ø–∞–∫–æ–≤—â–∏–∫":
		await call.message.answer(f'üîô –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=packer_menu())

	elif user.role == "–í–æ–¥–∏—Ç–µ–ª—å":
		await call.message.answer(f'üîô –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=driver_menu())


async def cloud():
	products = await drive_products()
	for product in products:
		time = int(str(product.time_update_location).split(" ")[1].split(":")[0])
		current_time = int(str(datetime.datetime.now()).split(" ")[1].split(":")[0])
		every_hours = current_time - time - 3
		if every_hours > 6:
			if product.status == "–í –¥–æ—Ä–æ–≥–µ":
				await bot.send_message(product.user.user_id, "‚ùó –û–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é") 
		if every_hours > 20:
			if product.status == "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è":
				operators = await get_operators()
				for operator in operators:
					await bot.send_message(operator.user_id, "‚ùó –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ–µ –∑–∞–∫–∞–∑—ã")
			elif product.status == "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω":
				logists = await get_operators()
				for logist in logists:
					await bot.send_message(logist.user_id, "‚ùó –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ–µ –∑–∞–∫–∞–∑—ã")



	

@dp.message_handler(commands=['start'], state="*")
async def start(message: types.Message, state: FSMContext):
	await state.finish()
	await cloud()
	await get_menu(message)

@dp.message_handler(text="üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", state="*")
async def employees(message: types.Message):
	users = await get_all_users()
	text = ""
	for user in users:
		text += f"–¢–µ–ª–µ–≥—Ä–∞–º: @{user.username}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {user.role}\nID: {user.user_id}\n\n"
	text = text.replace("@None", "–û—Ç—Å—Ç—É—Ç—Å–≤—É–µ—Ç username")
	text += f"\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(users)}</b>"
	await message.answer(text, reply_markup=employees_inline_menu())
	await cloud()

@dp.callback_query_handler(text_startswith="add_employees", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –±—É–¥—É—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=employees_role_inline())
	await cloud()

@dp.callback_query_handler(text_startswith="admin_code", state="*")
async def dsa1rfxsf3(call: types.CallbackQuery, state: FSMContext):
	code = randint(100, 999)
	await create_code_employees(user_id=call.message.chat.id, code=code, role="–ê–¥–º–∏–Ω")
	await get_menu_call(call)
	await call.message.answer(f"–ö–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å <b>–ê–¥–º–∏–Ω–∞</b> –≤ –±–æ—Ç–µ\n\n–ö–æ–¥: <code>{code}</code>")
	await cloud()

@dp.callback_query_handler(text_startswith="manager_code", state="*")
async def dsa1rfxsf3(call: types.CallbackQuery, state: FSMContext):
	code = code = randint(100, 999)
	await create_code_employees(user_id=call.message.chat.id, code=code, role="–ú–µ–Ω–µ–¥–∂–µ—Ä")
	await get_menu_call(call)
	await call.message.answer(f"–ö–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å <b>–ú–µ–Ω–µ–¥–∂–µ—Ä–∞</b> –≤ –±–æ—Ç–µ\n\n–ö–æ–¥: <code>{code}</code>")
	await cloud()

@dp.callback_query_handler(text_startswith="operator_code", state="*")
async def dsa1rfxsf3(call: types.CallbackQuery, state: FSMContext):
	code = code = randint(100, 999)
	await create_code_employees(user_id=call.message.chat.id, code=code, role="–û–ø–µ—Ä–∞—Ç–æ—Ä")
	await get_menu_call(call)
	await call.message.answer(f"–ö–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å <b>–û–ø–µ—Ä–∞—Ç–æ—Ä–∞</b> –≤ –±–æ—Ç–µ\n\n–ö–æ–¥: <code>{code}</code>")
	await cloud()

@dp.callback_query_handler(text_startswith="driver_code", state="*")
async def dsa1rfxsf3(call: types.CallbackQuery, state: FSMContext):
	code = code = randint(100, 999)
	await create_code_employees(user_id=call.message.chat.id, code=code, role="–í–æ–¥–∏—Ç–µ–ª—å")
	await get_menu_call(call)
	await call.message.answer(f"–ö–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å <b>–í–æ–¥–∏—Ç–µ–ª—è</b> –≤ –±–æ—Ç–µ\n\n–ö–æ–¥: <code>{code}</code>")
	await cloud()

@dp.callback_query_handler(text_startswith="packer_code", state="*")
async def dsa1rfxsf3(call: types.CallbackQuery, state: FSMContext):
	code = code = randint(100, 999)
	await create_code_employees(user_id=call.message.chat.id, code=code, role="–£–ø–∞–∫–æ–≤—â–∏–∫")
	await get_menu_call(call)
	await call.message.answer(f"–ö–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å <b>–£–ø–∞–∫–æ–≤—â–∏–∫</b> –≤ –±–æ—Ç–µ\n\n–ö–æ–¥: <code>{code}</code>")
	await cloud()

@dp.callback_query_handler(text_startswith="remove_employees", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	await state.finish()
	await call.message.answer("üÜî –í–≤–µ–¥–∏—Ç–µ ID —á–µ–ª–æ–≤–µ–∫–∞ —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å:")
	await D.user_id.set()
	await cloud()

@dp.message_handler(state=D.user_id)
async def dasdasdsa2(message: types.Message, state: FSMContext):
	if message.text.isdigit():
		user = await get_user_or_error(user_id=str(message.text))
		if user == "Error":
			await message.answer("‚ùå –¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		else:
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton("–ê–¥–º–∏–Ω", callback_data=f"remove_admin:{user.user_id}"), types.InlineKeyboardButton("–ú–µ–Ω–µ–¥–∂–µ—Ä", callback_data=f"remove_manager:{user.user_id}"))
			inlineh1.row(types.InlineKeyboardButton("–û–ø–µ—Ä–∞—Ç–æ—Ä", callback_data=f"remove_operator:{user.user_id}"), types.InlineKeyboardButton("–í–æ–¥–∏—Ç–µ–ª—å", callback_data=f"remove_driver:{user.user_id}"))
			inlineh1.row(types.InlineKeyboardButton("–£–ø–∞–∫–æ–≤—â–∏–∫", callback_data=f"remove_packer:{user.user_id}"))
			await message.answer(f"–ò–º—è: @{user.username}\nID: {user.user_id}\n–†–æ–ª—å: {user.role}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=inlineh1)
	else: await message.answer("‚ùå –ù–µ—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω ID")
	await state.finish()
	await cloud()

@dp.callback_query_handler(text_startswith="remove_admin", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	user_id = call.data.split(":")[1]
	user = await change_role_user(user_id=str(user_id), role="–ê–¥–º–∏–Ω")
	await get_menu_call(call)
	await call.message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Ä–æ–ª—å: <b>–ê–¥–º–∏–Ω–∞</b>")
	await cloud()

@dp.callback_query_handler(text_startswith="remove_manager", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	user_id = call.data.split(":")[1]
	user = await change_role_user(user_id=str(user_id), role="–ú–µ–Ω–µ–¥–∂–µ—Ä")

	await get_menu_call(call)
	await call.message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Ä–æ–ª—å: <b>–ú–µ–Ω–µ–¥–∂–µ—Ä–∞</b>")
	await cloud()

@dp.callback_query_handler(text_startswith="remove_operator", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	user_id = call.data.split(":")[1]
	user = await change_role_user(user_id=str(user_id), role="–ú–µ–Ω–µ–¥–∂–µ—Ä")

	await get_menu_call(call)

	await call.message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Ä–æ–ª—å: <b>–û–ø–µ—Ä–∞—Ç–æ—Ä–∞</b>")
	await cloud()

@dp.callback_query_handler(text_startswith="remove_driver", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	user_id = call.data.split(":")[1]
	user = await change_role_user(user_id=str(user_id), role="–í–æ–¥–∏—Ç–µ–ª—å")
	await get_menu_call(call)
	await call.message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Ä–æ–ª—å: <b>–í–æ–¥–∏—Ç–µ–ª—è</b>")
	await cloud()

@dp.callback_query_handler(text_startswith="remove_packer", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	user_id = call.data.split(":")[1]
	user = await change_role_user(user_id=str(user_id), role="–£–ø–∞–∫–æ–≤—â–∏–∫")
	await get_menu_call(call)
	await call.message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Ä–æ–ª—å: <b>–£–ø–∞–∫–æ–≤—â–∏–∫–∞</b>")
	await cloud()

@dp.message_handler(commands=['code'], state="*")
async def code(message: types.Message):
	await message.answer("üÜî –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –≤ –±–æ—Ç–µ: ")
	await D.code.set()
	await cloud()

@dp.message_handler(state=D.code)
async def code(message: types.Message, state: FSMContext):
	text = await find_code_and_apply(user_id=message.from_user.id, code=message.text)
	await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è, –§–∞–º–∏–ª–∏—é")
	await D.name.set()
	await cloud()

@dp.message_handler(state=D.name)
async def code(message: types.Message, state: FSMContext):
	name = f'{message.text}'
	await change_name(user_id=str(message.from_user.id), name=name)
	await message.answer("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –±–∞–∑—É.")
	await state.finish()
	await get_menu(message)
	await cloud()

@dp.message_handler(text="‚úç –î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", state="*")
async def userrequests(message: types.Message):
	await message.answer("üñã –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–±–ª–æ–Ω\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ\n–¢–æ–≤–∞—Ä\n–ê–¥—Ä–µ—Å\n–ù–æ–º–µ—Ä\n–¶–µ–Ω–∞\n–§–æ—Ç–æ\n\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start")
	await D.note.set()
	await cloud()

@dp.message_handler(state=D.note)
async def userrequests(message: types.Message, state: FSMContext):
	data = message.text.split("\n")
	text = await product_save(user_id=str(message.from_user.id), data=data)
	await message.answer(text)
	await state.finish()
	await cloud()

@dp.message_handler(text="üìî –ó–∞—è–≤–∫–∏", state="*")
async def employees(message: types.Message):
	products = await get_confirm_products()
	if len(products) >= 1:
		for product in products:
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"remove_request:{product.pk}"))
			inlineh1.row(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"confirm_request:{product.pk}"))
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await message.answer(text, reply_markup=inlineh1)
	else: await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
	await cloud()

@dp.message_handler(text="üìî –í—Å–µ –ó–∞—è–≤–∫–∏", state="*")
async def employees(message: types.Message):
	products = await get_products()
	if len(products) >= 1:
		for product in products:
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"remove_request:{product.pk}"))
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await message.answer(text, reply_markup=inlineh1)
	else: await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
	await cloud()

@dp.callback_query_handler(text_startswith="confirm_request", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	product_id = call.data.split(":")[1]
	text = await confirm_product(product_id=product_id)
	await get_menu_call(call)
	await call.message.delete()
	await call.message.answer(text)
	await cloud()

@dp.callback_query_handler(text_startswith="remove_request", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	product_id = call.data.split(":")[1]
	text = await delete_product(product_id=product_id)
	await get_menu_call(call)
	await call.message.delete()
	await call.message.answer(text)
	await cloud()

@dp.message_handler(text="üìï –û—Ç—á–µ—Ç", state="*")
async def employees(message: types.Message):
	answer = await report_info()
	user = await get_user_or_create(user_id=str(message.from_user.id))

	inlineh1 = types.InlineKeyboardMarkup()
	inlineh1.row(types.InlineKeyboardButton("–û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="ojid_confirmed"))
	inlineh1.row(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ", callback_data="oj_confirmd"), types.InlineKeyboardButton("–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ", callback_data="oj_canceled"))
	inlineh1.row(types.InlineKeyboardButton("–ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –£–ø–∞–∫–æ–≤—â–∏–∫—É", callback_data="oj_packer"))
	inlineh1.row(types.InlineKeyboardButton("–ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É", callback_data="oj_dispatcher"), types.InlineKeyboardButton("–í –¥–æ—Ä–æ–≥–µ", callback_data="oj_drive"))
	inlineh1.row(types.InlineKeyboardButton("–î–æ—Ä–æ–∂–Ω—ã–π –±—Ä–∞–∫", callback_data="oj_dorozh_brak"), types.InlineKeyboardButton("–§–∞–±—Ä–∏—á–Ω—ã–π –±—Ä–∞–∫", callback_data="oj_fabr_brak"))
	inlineh1.row(types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", callback_data="oj_delevired"))

	await message.answer(answer, reply_markup=inlineh1)
	await cloud()


# –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
@dp.callback_query_handler(text_startswith="oj_delevired", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	products = await oj_delivered()
	products1 = await dorozh_brak_products()
	products2 = await fabr_brack_products()

	if len(products) >= 1:
		for product in products2:
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide"))
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await call.message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await call.message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await call.message.answer(text, reply_markup=inlineh1)
	else: pass

	if len(products) >= 1:
		for product in products1:
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide"))
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await call.message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await call.message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await call.message.answer(text, reply_markup=inlineh1)
	else: pass

	if len(products) >= 1:
		for product in products:
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide"))
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await call.message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await call.message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await call.message.answer(text, reply_markup=inlineh1)
	else: pass




# –§–∞–±—Ä–∏—á–Ω—ã–π –±—Ä–∞–∫
@dp.callback_query_handler(text_startswith="oj_fabr_brak", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	products = await fabr_brack_products()
	if len(products) >= 1:
		for product in products:
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide"))
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await call.message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await call.message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await call.message.answer(text, reply_markup=inlineh1)
	else: await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# –î–æ—Ä–æ–∂–Ω—ã–π –±—Ä–∞–∫
@dp.callback_query_handler(text_startswith="oj_dorozh_brak", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	products = await dorozh_brak_products()
	if len(products) >= 1:
		for product in products:
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide"))
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await call.message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await call.message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await call.message.answer(text, reply_markup=inlineh1)
	else: await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# –í –¥–æ—Ä–æ–≥–µ
@dp.callback_query_handler(text_startswith="oj_drive", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	products = await get_drive_pr()
	if len(products) >= 1:
		for product in products:
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide"))
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await call.message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await call.message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await call.message.answer(text, reply_markup=inlineh1)
	else: await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
@dp.callback_query_handler(text_startswith="oj_dispatcher", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	products = await get_dispatchers()
	if len(products) >= 1:
		for product in products:
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide"))
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await call.message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await call.message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await call.message.answer(text, reply_markup=inlineh1)
	else: await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –£–ø–∞–∫–æ–≤—â–∏–∫—É
@dp.callback_query_handler(text_startswith="oj_packer", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	products = await get_packers()
	if len(products) >= 1:
		for product in products:
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide"))
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await call.message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await call.message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await call.message.answer(text, reply_markup=inlineh1)
	else: await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ
@dp.callback_query_handler(text_startswith="oj_canceled", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	products = await get_canceled()
	if len(products) >= 1:
		for product in products:
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide"))
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await call.message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await call.message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await call.message.answer(text, reply_markup=inlineh1)
	else: await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ
@dp.callback_query_handler(text_startswith="oj_confirmd", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	products = await get_confirmed()
	l.success(products)
	if products is None:
		await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
	else:
		if len(products) >= 1:
			for product in products:
				text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
				inlineh1 = types.InlineKeyboardMarkup()
				inlineh1.row(types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide"))
				if "http://" in str(product.photo) or "https://" in str(product.photo):
					await call.message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
				elif "media/users/" in str(product.photo):
					await call.message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
				else:
					await call.message.answer(text, reply_markup=inlineh1)
		else: await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

# –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.callback_query_handler(text_startswith="ojid_confirmed", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	products = await get_ojid_confirmed()
	if len(products) >= 1:
		for product in products:
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide"))
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await call.message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await call.message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await call.message.answer(text, reply_markup=inlineh1)
	else: await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")



@dp.message_handler(text="üìö –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏", state="*")
async def employees(message: types.Message):
	products = await get_confirmed_products()
	if len(products) >= 1:
		for product in products:
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —É–ø–∞–∫–æ–≤–∫—É", callback_data=f"confirmed_request:{product.pk}"))
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await message.answer(text, reply_markup=inlineh1)
	else: await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
	await cloud()

@dp.callback_query_handler(text_startswith="confirmed_request", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	product_id = call.data.split(":")[1]
	text = await product_pack(product_id=product_id)
	await get_menu_call(call)
	await call.message.answer(text)
	await cloud()

@dp.message_handler(text="‚ö° –ù–µ—É–ø–æ–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", state="*")
async def employees(message: types.Message):
	products = await get_pack_products()
	if len(products) >= 1:
		for product in products:
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑ —É–ø–∞–∫–æ–≤–∞–Ω", callback_data=f"confirmed2_request:{product.pk}"))
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await message.answer(text, reply_markup=inlineh1)
	else: await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏.")
	await cloud()

@dp.callback_query_handler(text_startswith="confirmed2_request", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	product_id = call.data.split(":")[1]
	text = await product_pack_conf(product_id=product_id)
	await get_menu_call(call)
	await call.message.answer(text)
	await cloud()

@dp.callback_query_handler(text_startswith="confirmed_drive_request", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	product_id = call.data.split(":")[1]
	text = await handover_product_to_drive(product_id=product_id, user_id=str(call.message.chat.id))
	await get_menu_call(call)
	await call.message.answer(text)
	await cloud()

@dp.message_handler(text="üöô –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", state="*")
async def employees(message: types.Message):
	products = await get_active_requests_drive(user_id=message.from_user.id)

	if len(products) >= 1:
		for product in products:
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton("‚úÖ –Ø –¥–æ—Å—Ç–∞–≤–∏–ª —ç—Ç–æ—Ç –∑–∞–∫–∞–∑", callback_data=f"conf_r_request:{product.pk}"))
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await message.answer(text, reply_markup=inlineh1)
	else: await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É.")
	await cloud()

@dp.callback_query_handler(text_startswith="conf_r_request", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	product_id = call.data.split(":")[1]
	text = await delivered(product_id=product_id)
	await get_menu_call(call)
	await call.message.answer(text)
	await cloud()

@dp.message_handler(content_types=['location'])
async def employees(message: types.Message):
	latitude = message.location["latitude"]
	longitude = message.location["longitude"]

	ua = UserAgent()
	random_user_agent = ua.random
	locator = Nominatim(user_agent=random_user_agent)
	address = locator.reverse(f'{latitude}, {longitude}')

	admin_list = await admins_list()
	for admin in admin_list:
		await bot.send_message(admin.user_id, "‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –æ–±–Ω–æ–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")

	text = address.address
	text1 = await change_location(user_id=message.from_user.id, location=text)
	await get_menu(message)
	await message.answer(text1)
	await cloud()

@dp.message_handler(text="üöì –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π", state="*")
async def employees(message: types.Message):
	products = await applications_drivers()
	if products:
		for product in products:
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton("üó∫ –ü–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data=f"location_dr:{product.pk}"))
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await message.answer(text, reply_markup=inlineh1)
	else: await message.answer("‚ùå –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
	await cloud()

@dp.callback_query_handler(text_startswith="location_dr", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	product_id = call.data.split(":")[1]
	product = await plea_location(product_id=product_id)
	await bot.send_message(product.driver.user_id, "<b>‚ùó‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å–∏—Ç –≤–∞—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è\"</b>")
	await call.message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è")
	await cloud()

@dp.message_handler(commands=['product'], state="*")
async def start(message: types.Message, state: FSMContext):
	await message.answer("üÜî –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞: ")
	await D.prod.set()
	await cloud()

@dp.message_handler(state=D.prod)
async def employees(message: types.Message, state: FSMContext):
	product_id = message.text
	product = await find_product(product_id=product_id)
	inlineh1 = types.InlineKeyboardMarkup()
	inlineh1.row(types.InlineKeyboardButton("üó∫ –ü–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data=f"location_dr:{product.pk}"))
	
	
	if product.status == "–î–æ—Å—Ç–∞–≤–ª–µ–Ω" or "–í –¥–æ—Ä–æ–≥–µ" == product.status:
		text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {product.status}"
	else: text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–ó–∞–≥—Ä—É–∑–∏–ª —Ç–æ–≤–∞—Ä: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"

	await message.answer(text, reply_markup=inlineh1)
	await cloud()

@dp.message_handler(text="üïì –ó–∞–∫–∞–∑—ã –≤–æ–¥–∏—Ç–µ–ª—è", state="*")
async def employees(message: types.Message):
	products = await pack_to_drive()
	if len(products) >= 1:
		for product in products:
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É", callback_data=f"confirmed_drive_request:{product.pk}"))
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await message.answer(text, reply_markup=inlineh1)
	else: await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
	await cloud()

@dp.message_handler(text="üì¢ –õ–æ–≥–∏—Å—Ç–∏–∫–∞", state="*")
async def employees(message: types.Message):
	products = await pack_to_logist()
	if len(products) >= 1:
		for product in products:
			
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"

			drivers = await get_all_drivers()
			inlineh1 = types.InlineKeyboardMarkup()
			
			if drivers.count() > 0:
				for driver in drivers:
					inlineh1.row(types.InlineKeyboardButton(f"üöó {driver.first_name}", callback_data=f"driv:{driver.pk}:{product.pk}"))
			else: inlineh1.row(types.InlineKeyboardButton(f"‚ùå –í–æ–¥–∏—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", callback_data=f"dsdsdriv"))
				
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await message.answer(text, reply_markup=inlineh1)
	else: await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
	await cloud()


@dp.callback_query_handler(text_startswith="driv", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	user_id = call.data.split(":")[1]
	product_id = call.data.split(":")[2]

	product = await get_product(product_id=product_id)
	user = await get_user(user_id=str(user_id))
	user_id = user.user_id

	if product:
		text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
		inlineh1 = types.InlineKeyboardMarkup()
		inlineh1.row(types.InlineKeyboardButton(f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"dr_confirmed:{user_id}:{product_id}"))
			
		if "http://" in str(product.photo) or "https://" in str(product.photo):
			await bot.send_photo(chat_id=user_id, photo=str(product.photo), caption=text, reply_markup=inlineh1)
		elif "media/users/" in str(product.photo):
			await bot.send_photo(chat_id=user_id, photo=open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
		else:
			await bot.send_message(chat_id=user_id, text=text, reply_markup=inlineh1)
		await call.message.delete()
		await call.message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ")
	else: await call.message.answer("‚ùå –¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –≤–æ–∑–º–æ–∂–Ω–æ –µ–≥–æ –∫—Ç–æ —Ç–æ —É–¥–∞–ª–∏–ª")
	await cloud()

@dp.callback_query_handler(text_startswith="dr_confirmed", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):

	user_id = call.data.split(":")[1]
	product_id = call.data.split(":")[2]

	user = await get_user_userId(user_id=user_id)
	product = await get_product(product_id=product_id)

	product = await driver_confrimed(user=user, product=product)
	await call.message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑")
	await state.finish()
	await get_menu_call(call)
	await call.message.delete()
	await call.message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ")
	await cloud()

@dp.message_handler(text="‚öí –ë—Ä–∞–∫–∏", state="*")
async def employees(message: types.Message):
	await message.answer("üÜî –í–≤–µ–¥–∏—Ç–µ ID –±—Ä–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: ")
	await D.match.set()
	await cloud()

@dp.message_handler(state=D.match)
async def employees(message: types.Message, state: FSMContext):
	try:
		products = await find_products(info=message.text)
		for product in products:
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton(f"–§–∞–±—Ä–∏—á–Ω—ã–π –±—Ä–∞–∫", callback_data=f"product_brak_f:{product.pk}"),
						 types.InlineKeyboardButton(f"–î–æ—Ä–æ–∂–Ω—ã–π –±—Ä–∞–∫", callback_data=f"product_brak_d:{product.pk}"))
			inlineh1.row(types.InlineKeyboardButton(f"–°–∫—Ä—ã—Ç—å", callback_data="message_hide"))

			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			if "http://" in str(product.photo) or "https://" in str(product.photo):
				await message.answer_photo(str(product.photo), caption=text, reply_markup=inlineh1)
			elif "media/users/" in str(product.photo):
				await message.answer_photo(open(str(product.photo), 'rb'), caption=text, reply_markup=inlineh1)
			else:
				await message.answer(text, reply_markup=inlineh1)
	except Exception as ex: await message.answer(f"‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω ({ex})")
	await state.finish()
	await cloud()

@dp.callback_query_handler(text_startswith="message_hide", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	await call.message.delete()
	await state.finish()
	await cloud()

@dp.callback_query_handler(text_startswith="product_brak_d", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	product_id = call.data.split(":")[1]
	await D.match3.set()
	await state.update_data(product_id=product_id)
	await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–±–ª–æ–Ω—É\n\n–¢–æ–≤–∞—Ä\n–ù–æ–≤–∞—è —Ü–µ–Ω–∞")
	await cloud()

@dp.message_handler(state=D.match3)
async def employees(message: types.Message, state: FSMContext):
	_ = await state.get_data()
	data = message.text.split("\n")

	product_title = data[0]
	product_price = data[1]
	product_id = _["product_id"]

	text = await product_match(title=product_title, price=product_price, product_id=product_id, status="–î–æ—Ä–æ–∂–Ω—ã–π –±—Ä–∞–∫")
	await message.answer(text)
	await state.finish()
	await get_menu(message)
	await cloud()



@dp.callback_query_handler(text_startswith="product_brak_f", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
	product_id = call.data.split(":")[1]
	await D.match2.set()
	await state.update_data(product_id=product_id)
	await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–±–ª–æ–Ω—É\n\n–¢–æ–≤–∞—Ä\n–ù–æ–≤–∞—è —Ü–µ–Ω–∞")
	await cloud()

@dp.message_handler(state=D.match2)
async def employees(message: types.Message, state: FSMContext):
	_ = await state.get_data()
	data = message.text.split("\n")

	product_title = data[0]
	product_price = data[1]
	product_id = _["product_id"]

	text = await product_match(title=product_title, price=product_price, product_id=product_id, status="–§–∞–±—Ä–∏—á–Ω—ã–π –±—Ä–∞–∫")
	await message.answer(text)
	await state.finish()
	await get_menu(message)
	await cloud()



@dp.message_handler(text="üåè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É", state="*")
async def employees(message: types.Message, state: FSMContext):
	await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
	await cloud()
	await D.remake_request.set()

@dp.message_handler(state=D.remake_request)
async def efdsfsdff(message: types.Message, state: FSMContext):
	text = message.text
	products = await find_products(info=text)
	if products is None:
		await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
	else:
		for product in products:
			inlineh1 = types.InlineKeyboardMarkup()
			inlineh1.row(types.InlineKeyboardButton(f"üñã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"edit_request:{product.pk}"))
			inlineh1.row(types.InlineKeyboardButton(f"‚ôª –°–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"hide_message"))
			text = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}"
			await message.answer(text, reply_markup=inlineh1)

@dp.callback_query_handler(text_startswith="hide_message", state="*")
async def fdfdsfd13(call: types.CallbackQuery, state: FSMContext):
	await call.message.delete()
	await call.message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ")


@dp.callback_query_handler(text_startswith="edit_request", state="*")
async def fdsf31fkx1(call: types.CallbackQuery, state: FSMContext):
	product_id = call.data.split(":")[1]
	await state.update_data(product_id=product_id)
	await call.message.answer("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–±–ª–æ–Ω:\n\nüñã –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–±–ª–æ–Ω\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ\n–ê–¥—Ä–µ—Å\n–¢–æ–≤–∞—Ä\n–¶–µ–Ω–∞\n–ù–æ–º–µ—Ä\n–§–æ—Ç–æ\n\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start")
	await D.edit_product.set()

@dp.message_handler(state=D.edit_product)
async def dasfk12fs21(message: types.Message, state: FSMContext):
	data = message.text
	product = await state.get_data()
	text = await product_edit(product_id=product['product_id'], data=data)
	await message.answer(text)


@dp.message_handler(text="üíµ –ó–∞—Ä–∞–±–æ—Ç–æ–∫", state="*")
async def fdsf13fsa(message: types.Message, state: FSMContext):
	text = await get_money()
	await message.answer(text)
	await state.finish()
	await cloud()












